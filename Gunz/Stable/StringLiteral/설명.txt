
>> 상황
exe를 빌드하고 나서 파일을 열어보면 코드에 박혀있는 문자열 상수들이
그대로 노출되어 있다. xtrap과 gameguard로 실행파일을 암호화하긴 하는데,
현재도 크래커들이 그 프로텍트를 풀어서 원본 exe를 맘대로 들여다보고있는게 현실이다.

브라질에서, 이 exe에 포함된 문자열 상수를 바꿔치거나 삭제해서 코드의 작동을 변경하는 방식의
핵 프로그램이 배포되었다.
일례로, "bt_price"와 "hp"의 위치를 바꿔치기한다. 이 문자열은 item 정보 부분인데,
이게 서로 바뀌어버리면 모든 아이템에 부여된 hp추가보너스를 읽는 코드가 바운티 가격("bt_price")을
읽어들이게 된다. 바운티 가격만큼의 hp추가보너스를 취득하게 되는 식이다.
마찬가지로 대미지 등 여러가지 속성치에 어뷰징이 가능해진다.


>> 대처
빌드전 이벤트로 소스코드에 포함된 문자열 상수들을 encrypt하는 프로그램을 돌린다.
그래서 exe가 빌드완료 되었을때 인코딩된 문자열 상수가 포함되도록 해야하고,
문자열을 사용하는 코드는 매번 그 encrypt된 문자열을 decrypt해서 사용하도록 해야한다.


>> 기타
각 프로젝트에 포함된 어뷰즈 대상 문자열들을 추려내서 별도 파일에 모아놓고 이 프로젝트에 포함시킨다.
이 프로젝트는 문자열을 추려낸 프로젝트의 상위 프로젝트가 되어야 한다 (빌드 종속성 설정)

현재로서 상수 문자열을 인코딩해야 하는 프로젝트는 CSCommon과 Gunz다.

클라이언트솔루션에서는 CSCommon과 Gunz 프로젝트에서 _USING_CXR 전처리문을 선언해서 인코딩 문자열을 사용하도록 만든다.
서버는 문자열 디코딩 부하를 감수할 필요가 없으므로 서버솔루션에서는 기존과 동일하게 처리한다(즉 _USING_CXR 전처리문 미포함).



>> 문자열을 새로 추가해야 할 때
지금 StringLiteral 프로젝트의 MMatchItem.cxr 파일이 MMatchItem.h에서 사용되는 상수 문자열들을 추려내서
인코딩용 디파인을 걸어놓은 상태의 파일입니다. 이것을 참조해서 비슷하게 처리해주시면 됩니다.
적용이 안되는 경우 vs가 파일이 변경된 것을 모르는 경우일 수 있으므로 .cxr파일을 변경한 경우엔 StringLiteral 프로젝트를 리빌드하거나
전체 솔루션 리빌드를 하면 적용이 될 것입니다.
